[{"D:\\Code\\Projects\\maze-algorithms\\src\\index.js":"1","D:\\Code\\Projects\\maze-algorithms\\src\\App.js":"2","D:\\Code\\Projects\\maze-algorithms\\src\\reportWebVitals.js":"3","D:\\Code\\Projects\\maze-algorithms\\src\\components\\AppCanvas\\index.js":"4","D:\\Code\\Projects\\maze-algorithms\\src\\components\\Controls\\index.js":"5","D:\\Code\\Projects\\maze-algorithms\\src\\utils\\SquareGrid.js":"6","D:\\Code\\Projects\\maze-algorithms\\src\\utils\\GridPoint.js":"7","D:\\Code\\Projects\\maze-algorithms\\src\\utils\\HexGrid.js":"8","D:\\Code\\Projects\\maze-algorithms\\src\\components\\Controls\\Slider.js":"9","D:\\Code\\Projects\\maze-algorithms\\src\\utils\\MazeGenerator.js":"10"},{"size":500,"mtime":499162500000,"results":"11","hashOfConfig":"12"},{"size":1938,"mtime":1607970277615,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"12"},{"size":4796,"mtime":1607971263158,"results":"15","hashOfConfig":"12"},{"size":5268,"mtime":1607971936972,"results":"16","hashOfConfig":"12"},{"size":1099,"mtime":1607874755242,"results":"17","hashOfConfig":"12"},{"size":372,"mtime":1607670512140,"results":"18","hashOfConfig":"12"},{"size":3534,"mtime":1607795070211,"results":"19","hashOfConfig":"12"},{"size":578,"mtime":1607966191053,"results":"20","hashOfConfig":"12"},{"size":12293,"mtime":1607971861919,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1p0ubig",{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Code\\Projects\\maze-algorithms\\src\\index.js",[],["45","46"],"D:\\Code\\Projects\\maze-algorithms\\src\\App.js",["47"],"D:\\Code\\Projects\\maze-algorithms\\src\\reportWebVitals.js",[],"D:\\Code\\Projects\\maze-algorithms\\src\\components\\AppCanvas\\index.js",["48","49","50","51","52"],"import p5 from \"p5\";\r\nimport { useContext, useEffect, useReducer, useRef, useState } from \"react\";\r\nimport { AppStateContext } from \"../../App\";\r\n\r\nfunction renderConfigReducer(state, action){\r\n\treturn {\r\n\t\t...state,\r\n\t\taction\r\n\t}\r\n}\r\n\r\nexport default function AppCanvas(props){\r\n\r\n\tconst [appState] = useContext(AppStateContext);\r\n\tconst [renderer, setRenderer] = useState(null);\r\n\r\n\tconst [renderConfig, dispatchConfig] = useReducer(renderConfigReducer, {\r\n\t\tgrid: {\r\n\t\t\tpoint: {\r\n\t\t\t\tstroke: 3,\r\n\t\t\t\tcolor: \"silver\"\r\n\t\t\t},\r\n\t\t\tline: {\r\n\t\t\t\tstroke: 1,\r\n\t\t\t\tcolor: \"silver\"\r\n\t\t\t}\r\n\t\t},\r\n\t\tmaze: {\r\n\t\t\tstartPoint: {\r\n\t\t\t\tstroke: 7,\r\n\t\t\t\tcolor: \"green\"\r\n\t\t\t},\r\n\t\t\tnodePoint: {\r\n\t\t\t\tstroke: 7,\r\n\t\t\t\tcolor: \"blue\"\r\n\t\t\t},\r\n\t\t\tline: {\r\n\t\t\t\tstroke: 3,\r\n\t\t\t\tcolor: \"cyan\"\r\n\t\t\t}\r\n\t\t}\r\n\t}); \r\n\r\n\tconst canvasRef = useRef();\r\n\r\n\t// Draws the grid using points and the line\r\n\tconst drawGrid = (p5) => {\r\n\t\tp5.background(0);\r\n\t\tif(appState.grid){\r\n\t\t\t\r\n\t\t\tfor(const row of appState.grid.points){\r\n\t\t\t\tfor(const point of row){\r\n\t\t\t\t\t// Draw point\r\n\t\t\t\t\tp5.strokeWeight(renderConfig.grid.point.stroke);\r\n\t\t\t\t\tp5.stroke(renderConfig.grid.point.color);\r\n\t\t\t\t\tconst p = p5.createVector(point.position.x + appState.origin.x, point.position.y + appState.origin.y);\r\n\t\t\t\t\tp5.point(p.x, p.y);\r\n\r\n\t\t\t\t\t// Draw connections which are positive y-axis changes and not directly left\r\n\t\t\t\t\tfor(const neighbour of point.neighbours){\r\n\t\t\t\t\t\tconst diff = {\r\n\t\t\t\t\t\t\tx: neighbour.position.x - point.position.x,\r\n\t\t\t\t\t\t\ty: neighbour.position.y - point.position.y\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Draw line\r\n\t\t\t\t\t\tp5.stroke(renderConfig.grid.line.color);\r\n\t\t\t\t\t\tp5.strokeWeight(renderConfig.grid.line.stroke);\r\n\t\t\t\t\t\tp5.line(p.x, p.y, neighbour.position.x + appState.origin.x, neighbour.position.y + appState.origin.y);\r\n\t\t\t\t\t}\r\n\t\t\t\t} \r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Draws the maze and shows the path connections\r\n\tconst drawMaze = (p5) => {\r\n\t\tif(appState.maze){\r\n\t\t\t// Draw the graph lines\r\n\t\t\tfor(const node of appState.maze.graph){\r\n\t\t\t\t\r\n\t\t\t\t// Draw node connections\r\n\t\t\t\tfor(const connection of node.connections){\r\n\t\t\t\t\tp5.stroke(renderConfig.maze.line.color);\r\n\t\t\t\t\tp5.strokeWeight(renderConfig.maze.line.stroke)\r\n\t\t\t\t\tp5.line(node.point.position.x + appState.origin.x, \r\n\t\t\t\t\t\tnode.point.position.y + appState.origin.y, \r\n\t\t\t\t\t\tconnection.position.x + appState.origin.x,\r\n\t\t\t\t\t\tconnection.position.y + appState.origin.y);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Draw the maze points\r\n\t\t\tfor(const node of appState.maze.graph){\r\n\t\t\t\t// Draw node point \r\n\t\t\t\tp5.stroke(renderConfig.maze.nodePoint.color);\r\n\t\t\t\tp5.strokeWeight(renderConfig.maze.nodePoint.stroke)\r\n\t\t\t\tp5.point(node.point.position.x + appState.origin.x, node.point.position.y + appState.origin.y);\r\n\t\t\t}\r\n\r\n\t\t\t// Draw starting point\r\n\t\t\tp5.stroke(renderConfig.maze.startPoint.color);\r\n\t\t\tp5.strokeWeight(renderConfig.maze.startPoint.stroke)\r\n\t\t\tp5.point(appState.maze.start.position.x + appState.origin.x, appState.maze.start.position.y + appState.origin.y);\r\n\t\t}\r\n\t}\r\n\r\n\t// DEBUGGING draws the maze outline\r\n\tconst drawOutline = (p5) => {\r\n\t\tlet color = {\r\n\t\t\tlayer: 40,\r\n\t\t\tslice: 40,\r\n\t\t\tfragment: 70\r\n\t\t}\r\n\t\tlet counter = {\r\n\t\t\tlayer: 1,\r\n\t\t\tslice: 1,\r\n\t\t\tfragment: 1 \r\n\t\t}\r\n\r\n\t\t// Layers\r\n\t\tfor(const layer of appState.maze.outline){\r\n\t\t\tcounter.layer++;\r\n\t\t\tcounter.slice = 1;\r\n\t\t\tfor(const slice of layer){\r\n\t\t\t\tcounter.slice++;\r\n\t\t\t\tcounter.fragment = 1;\r\n\t\t\t\tfor(const fragment of slice){\r\n\t\t\t\t\tcounter.fragment++;\r\n\t\t\t\t\tfor(const row of fragment.subgraph){\r\n\t\t\t\t\t\tfor(const point of row){\r\n\t\t\t\t\t\t\t// if(point.weight){\r\n\t\t\t\t\t\t\t// p5.stroke(255 * point.weight,255 * point.weight,255 * point.weight);\r\n\t\t\t\t\t\t\tp5.stroke((color.layer * counter.layer) * 2 / counter.fragment, ((2.2 * counter.slice * color.slice - color.layer * counter.layer)) * 2 / counter.fragment, (color.layer * counter.slice) * 2 / counter.fragment);\r\n\t\t\t\t\t\t\tp5.strokeWeight(renderConfig.maze.nodePoint.stroke);\r\n\t\t\t\t\t\t\tp5.point(point.position.x + appState.origin.x, point.position.y + appState.origin.y);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Initialize p5 sketch methods\r\n\tconst sketch = (p5) => {\r\n\r\n\t\t// Setup canvas size\r\n\t\tp5.setup = () => {\r\n\t\t\tp5.createCanvas(props.canvasSize, props.canvasSize);\r\n\t\t\tp5.noLoop();\r\n\t\t}\r\n\r\n\t\t// Draw to the canvas\r\n\t\tp5.draw = () => {  \r\n\t\t\tdrawGrid(p5);\r\n\t\t\tdrawMaze(p5);\r\n\t\t}\r\n\t}\r\n\r\n\t// When appState.grid or the renderer changes, draw the grid\r\n\tuseEffect(()=>{\r\n\t\tif(renderer && appState.grid){\r\n\t\t\trenderer.clear();\r\n\t\t\tdrawGrid(renderer);\r\n\t\t\tdrawOutline(renderer);\r\n\t\t\tdrawMaze(renderer);\r\n\t\t}\r\n\t}, [appState.maze, appState.origin, appState.grid, renderer]);\r\n\r\n\t// Setup the canvas on load\r\n\tuseEffect(() => {\r\n\t\tconst p5Instance = new p5(sketch, canvasRef.current);\r\n\t\tsetRenderer(p5Instance);\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<div ref={canvasRef}></div>\r\n\t);\r\n}\r\n","D:\\Code\\Projects\\maze-algorithms\\src\\components\\Controls\\index.js",["53","54","55","56","57","58","59"],"D:\\Code\\Projects\\maze-algorithms\\src\\utils\\SquareGrid.js",[],"D:\\Code\\Projects\\maze-algorithms\\src\\utils\\GridPoint.js",[],"D:\\Code\\Projects\\maze-algorithms\\src\\utils\\HexGrid.js",["60","61"],"import GridPoint from \"./GridPoint\";\r\n\r\nconst sqrt3 = Math.sqrt(3); \r\nconst sqrt1_3 = 1 / Math.sqrt(3);\r\n\r\nexport default class HexGrid{\r\n\tconstructor(height, width, sideLength){\r\n\t\tthis.height = height;\r\n\t\tthis.width = width;\r\n\t\tthis.sideLength = sideLength;\r\n\t\r\n\t\t// Start at the center\r\n\t\tthis.points = [[new GridPoint(0,0)]];\r\n\t\tlet open = this.getNextHexagon();\r\n\r\n\t\t// Until there are no more rings which can fit inside the bounds, repeatedly add rings to the grid\r\n\t\twhile(open.length > 0){\r\n\t\t\t// Assign the open points their neighbours\r\n\t\t\tfor(let index = 0; index < open.length; index++){\r\n\t\t\t\tconst point = open[index];\r\n\t\t\t\t\r\n\t\t\t\t// If the point is a corner, connect it to the previous corner\r\n\t\t\t\tif(index % this.points.length === 0){\r\n\t\t\t\t\t// Connect it using index matching for hexagons which don't leave the bounds\r\n\t\t\t\t\tif(open.length === this.points.length * 6){\r\n\t\t\t\t\t\tpoint.addNeighbour(this.points[this.points.length-1][Math.floor(index * (1 - 1 / this.points.length))]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// Else connect it to the two side points closest to it\r\n\t\t\t\telse{\r\n\t\t\t\t\tconst sideNumber = Math.floor(index / this.points.length);\r\n\t\t\t\t\tconst sideIndex = index % this.points.length;\r\n\r\n\t\t\t\t\t// Calculate the index using the smaller hexagon and account for index wrapping\r\n\t\t\t\t\tconst nextIndex = (sideNumber * (this.points.length - 1) + sideIndex) % ((this.points.length -1)* 6);\r\n\t\t\t\t\tconst prevIndex = nextIndex - 1 < 0 ? ((this.points.length - 1) * 6 - 1) : nextIndex - 1;\r\n\r\n\t\t\t\t\tpoint.addNeighbour(this.points[this.points.length-1][prevIndex]);\r\n\t\t\t\t\tpoint.addNeighbour(this.points[this.points.length-1][nextIndex]);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// connect point to its neighbours\r\n\t\t\t\tconst prevIndex = Math.max(index - 1, 0);\r\n\t\t\t\tconst nextIndex = (index + 1) % open.length;\r\n\t\t\t\tpoint.addNeighbour(open[prevIndex]);\r\n\t\t\t\tpoint.addNeighbour(open[nextIndex]);\r\n\t\t\t}\r\n\r\n\t\t\t// Add the points to the grid and get the next hexagon\r\n\t\t\tthis.points.push(open)\r\n\t\t\topen = this.getNextHexagon();\r\n\t\t}\r\n\t}\r\n\t\t\r\n\t\r\n\t// Get all points which can be reached as a point on a regular hexagon concentric to the current grid\r\n\tgetNextHexagon(){\r\n\t\t// Figure out how far out the ring is\r\n\t\tconst index = this.points.length;\r\n\t\tconst newRing = [];\r\n\r\n\t\t// Iterate over each hexagon vertex and collect #index number of points into the new ring\r\n\t\t// Use discrete angle counting to cirumvent JS rounding errors\r\n\t\tfor(let angleIndex = 0; angleIndex < 6; angleIndex++){\r\n\t\t\tconst angle = angleIndex * Math.PI / 3;\r\n\t\t\tconst nextAngle = ((angleIndex + 1)%6) * Math.PI / 3;\r\n\r\n\t\t\t// Calculate a unit vector between the current hex vertex and the next hex vertex\r\n\t\t\tconst angleLine = {\r\n\t\t\t\tx: Math.cos(nextAngle) - Math.cos(angle),\r\n\t\t\t\ty: Math.sin(nextAngle) - Math.sin(angle)\r\n\t\t\t}\r\n\t\t\tangleLine.x /= Math.hypot(angleLine.x, angleLine.y);\r\n\t\t\tangleLine.y /= Math.hypot(angleLine.x, angleLine.y);\r\n\r\n\t\t\t// Add index number of points along the unit vector\r\n\t\t\tfor(let sideNumber = 0; sideNumber < index; sideNumber++){\r\n\t\t\t\tconst p = {\r\n\t\t\t\t\tx: this.sideLength * index * Math.cos(angle) + angleLine.x * sideNumber * this.sideLength,\r\n\t\t\t\t\ty: this.sideLength * index * Math.sin(angle) + angleLine.y * sideNumber * this.sideLength\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Only add the point if it fits in the bounds\r\n\t\t\t\tif(0 > Math.abs(p.x) \r\n\t\t\t    || Math.abs(p.x) > this.width / 2\r\n\t\t\t\t|| 0 > Math.abs(p.y)\r\n\t\t\t\t|| Math.abs(p.y) > this.height / 2){\r\n\t\t\t\t\treturn [];\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tnewRing.push(new GridPoint(p.x, p.y));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn newRing;\r\n\t}\r\n}","D:\\Code\\Projects\\maze-algorithms\\src\\components\\Controls\\Slider.js",["62"],"D:\\Code\\Projects\\maze-algorithms\\src\\utils\\MazeGenerator.js",["63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91"],{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":1,"column":8,"nodeType":"98","messageId":"99","endLine":1,"endColumn":12},{"ruleId":"96","severity":1,"message":"100","line":17,"column":23,"nodeType":"98","messageId":"99","endLine":17,"endColumn":37},{"ruleId":"96","severity":1,"message":"101","line":61,"column":13,"nodeType":"98","messageId":"99","endLine":61,"endColumn":17},{"ruleId":"96","severity":1,"message":"102","line":110,"column":7,"nodeType":"98","messageId":"99","endLine":110,"endColumn":12},{"ruleId":"103","severity":1,"message":"104","line":170,"column":5,"nodeType":"105","endLine":170,"endColumn":62,"suggestions":"106"},{"ruleId":"103","severity":1,"message":"107","line":176,"column":5,"nodeType":"105","endLine":176,"endColumn":7,"suggestions":"108"},{"ruleId":"96","severity":1,"message":"109","line":1,"column":47,"nodeType":"98","messageId":"99","endLine":1,"endColumn":56},{"ruleId":"96","severity":1,"message":"110","line":82,"column":20,"nodeType":"98","messageId":"99","endLine":82,"endColumn":32},{"ruleId":"96","severity":1,"message":"111","line":86,"column":21,"nodeType":"98","messageId":"99","endLine":86,"endColumn":34},{"ruleId":"96","severity":1,"message":"112","line":87,"column":21,"nodeType":"98","messageId":"99","endLine":87,"endColumn":34},{"ruleId":"113","severity":1,"message":"114","line":115,"column":17,"nodeType":"115","messageId":"116","endLine":115,"endColumn":49},{"ruleId":"113","severity":1,"message":"114","line":133,"column":11,"nodeType":"115","messageId":"116","endLine":133,"endColumn":43},{"ruleId":"113","severity":1,"message":"114","line":149,"column":10,"nodeType":"115","messageId":"116","endLine":149,"endColumn":42},{"ruleId":"96","severity":1,"message":"117","line":3,"column":7,"nodeType":"98","messageId":"99","endLine":3,"endColumn":12},{"ruleId":"96","severity":1,"message":"118","line":4,"column":7,"nodeType":"98","messageId":"99","endLine":4,"endColumn":14},{"ruleId":"103","severity":1,"message":"119","line":14,"column":5,"nodeType":"105","endLine":14,"endColumn":12,"suggestions":"120"},{"ruleId":"96","severity":1,"message":"121","line":1,"column":8,"nodeType":"98","messageId":"99","endLine":1,"endColumn":17},{"ruleId":"96","severity":1,"message":"122","line":2,"column":8,"nodeType":"98","messageId":"99","endLine":2,"endColumn":15},{"ruleId":"96","severity":1,"message":"123","line":3,"column":8,"nodeType":"98","messageId":"99","endLine":3,"endColumn":18},{"ruleId":"124","severity":1,"message":"125","line":98,"column":41,"nodeType":"126","messageId":"127","endLine":98,"endColumn":115},{"ruleId":"96","severity":1,"message":"128","line":115,"column":14,"nodeType":"98","messageId":"99","endLine":115,"endColumn":15},{"ruleId":"124","severity":1,"message":"129","line":142,"column":42,"nodeType":"126","messageId":"127","endLine":142,"endColumn":127},{"ruleId":"96","severity":1,"message":"130","line":215,"column":10,"nodeType":"98","messageId":"99","endLine":215,"endColumn":26},{"ruleId":"96","severity":1,"message":"131","line":229,"column":10,"nodeType":"98","messageId":"99","endLine":229,"endColumn":25},{"ruleId":"132","severity":1,"message":"133","line":240,"column":10,"nodeType":"134","messageId":"135","endLine":240,"endColumn":12},{"ruleId":"132","severity":1,"message":"133","line":240,"column":16,"nodeType":"134","messageId":"135","endLine":240,"endColumn":17},{"ruleId":"132","severity":1,"message":"136","line":240,"column":16,"nodeType":"134","messageId":"135","endLine":240,"endColumn":17},{"ruleId":"132","severity":1,"message":"136","line":240,"column":20,"nodeType":"134","messageId":"135","endLine":240,"endColumn":23},{"ruleId":"132","severity":1,"message":"137","line":242,"column":20,"nodeType":"134","messageId":"135","endLine":242,"endColumn":21},{"ruleId":"132","severity":1,"message":"137","line":242,"column":24,"nodeType":"134","messageId":"135","endLine":242,"endColumn":27},{"ruleId":"132","severity":1,"message":"137","line":243,"column":20,"nodeType":"134","messageId":"135","endLine":243,"endColumn":21},{"ruleId":"132","severity":1,"message":"137","line":243,"column":24,"nodeType":"134","messageId":"135","endLine":243,"endColumn":27},{"ruleId":"132","severity":1,"message":"137","line":255,"column":13,"nodeType":"134","messageId":"135","endLine":255,"endColumn":14},{"ruleId":"132","severity":1,"message":"137","line":255,"column":17,"nodeType":"134","messageId":"135","endLine":255,"endColumn":20},{"ruleId":"132","severity":1,"message":"133","line":257,"column":14,"nodeType":"134","messageId":"135","endLine":257,"endColumn":16},{"ruleId":"132","severity":1,"message":"133","line":257,"column":20,"nodeType":"134","messageId":"135","endLine":257,"endColumn":21},{"ruleId":"132","severity":1,"message":"136","line":257,"column":20,"nodeType":"134","messageId":"135","endLine":257,"endColumn":21},{"ruleId":"132","severity":1,"message":"136","line":257,"column":24,"nodeType":"134","messageId":"135","endLine":257,"endColumn":27},{"ruleId":"96","severity":1,"message":"138","line":282,"column":8,"nodeType":"98","messageId":"99","endLine":282,"endColumn":13},{"ruleId":"96","severity":1,"message":"139","line":292,"column":11,"nodeType":"98","messageId":"99","endLine":292,"endColumn":16},{"ruleId":"96","severity":1,"message":"140","line":295,"column":11,"nodeType":"98","messageId":"99","endLine":295,"endColumn":16},{"ruleId":"96","severity":1,"message":"141","line":298,"column":11,"nodeType":"98","messageId":"99","endLine":298,"endColumn":17},{"ruleId":"142","severity":1,"message":"143","line":299,"column":4,"nodeType":"144","messageId":"145","endLine":301,"endColumn":11},{"ruleId":"96","severity":1,"message":"146","line":300,"column":11,"nodeType":"98","messageId":"99","endLine":300,"endColumn":17},{"ruleId":"96","severity":1,"message":"147","line":320,"column":8,"nodeType":"98","messageId":"99","endLine":320,"endColumn":13},"no-native-reassign",["148"],"no-negated-in-lhs",["149"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'dispatchConfig' is assigned a value but never used.","'diff' is assigned a value but never used.","'color' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'drawGrid', 'drawMaze', and 'drawOutline'. Either include them or remove the dependency array.","ArrayExpression",["150"],"React Hook useEffect has a missing dependency: 'sketch'. Either include it or remove the dependency array.",["151"],"'useEffect' is defined but never used.","'setMazeStart' is assigned a value but never used.","'setGridConfig' is assigned a value but never used.","'setMazeConfig' is assigned a value but never used.","no-new-wrappers","Do not use Number as a constructor.","NewExpression","noConstructor","'sqrt3' is assigned a value but never used.","'sqrt1_3' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.output'. Either include it or remove the dependency array.",["152"],"'GridPoint' is defined but never used.","'HexGrid' is defined but never used.","'SquareGrid' is defined but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'largestIndex', 'largestIndex'.","ArrowFunctionExpression","unsafeRefs","'_' is assigned a value but never used.","Function declared in a loop contains unsafe references to variable(s) 'largestFragIndex', 'largestFragIndex'.","'generateRingMaze' is defined but never used.","'generateWeights' is defined but never used.","no-mixed-operators","Unexpected mix of '<<' and '|'.","BinaryExpression","unexpectedMixedOperator","Unexpected mix of '|' and '>>>'.","Unexpected mix of '^' and '>>>'.","'gates' is assigned a value but never used.","'nring' is assigned a value but never used.","'sring' is assigned a value but never used.","'eslice' is assigned a value but never used.","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","'wslice' is assigned a value but never used.","'graph' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"153","fix":"154"},{"desc":"155","fix":"156"},{"desc":"157","fix":"158"},"Update the dependencies array to be: [appState.maze, appState.origin, appState.grid, renderer, drawGrid, drawOutline, drawMaze]",{"range":"159","text":"160"},"Update the dependencies array to be: [sketch]",{"range":"161","text":"162"},"Update the dependencies array to be: [props.output, value]",{"range":"163","text":"164"},[4567,4624],"[appState.maze, appState.origin, appState.grid, renderer, drawGrid, drawOutline, drawMaze]",[4769,4771],"[sketch]",[257,264],"[props.output, value]"]